@*@model IEnumerable<BOL.tbl_SupBudgetHeader>*@

@model workWorkFlowUI.ViewModel.SupplementaryBudgetViewModal
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Supplementary Budget</h2>

<p>
    @Html.ActionLink("Add New Supplementary Budget", "AddNewSup", new  { refNumber = 0 })
</p>
<table class="table table-striped table-bordered table-hover">
    <tr class="info">
        <th>
            @*@Html.DisplayNameFor(model => model.ReferenceNo)*@
            @Html.ActionLink("Reference No", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "ReferenceNo", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.ReferenceNo)*@
            @Html.ActionLink("Raising Dept", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "CostCentre", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.CostObject)*@
            @Html.ActionLink("Cost Object", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "CostObject", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.ObjectNo)*@
            @Html.ActionLink("Object No", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "ObjectNo", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.ObjectName)*@
            @Html.ActionLink("Object Name", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "ObjectName", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.FromDivision)*@
            @Html.ActionLink("From Division", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "FromDivision", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.NetPrice)*@
            @Html.ActionLink("Net Price", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "NetPrice", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Currency)*@
            @Html.ActionLink("Currency", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "Currency", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.VariationOrderNo) *@
            @Html.ActionLink("Variation Order No", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "VariationOrderNo", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.UpdateBy)*@
            @Html.ActionLink("Update By", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "UpdateBy", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.UpdateDate)*@
            @Html.ActionLink("Update Date", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "UpdateDate", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.SubmitBy)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SubmitDate)
        </th>*@
        <th>
            @*@Html.DisplayNameFor(model => model.Status)*@
            @Html.ActionLink("Status", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "Status", page = (ViewBag.Page == null ? "1" : ViewBag.Page) })
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.ApplicationFor)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReasonFor)
        </th>*@
        <th></th>
    </tr>

@foreach (var item in Model.supHeader) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.ReferenceNo)
        </td>
        <td>
            @if(!string.IsNullOrEmpty(Convert.ToString(item.CostCentreID)))
            {
                var cuCostCentre = Model.costCentre.Where(p => p.CostCentreID == item.CostCentreID).ToList();
                if(cuCostCentre!=null && cuCostCentre.Count>0)
                {
                    @Html.Raw(cuCostCentre[0].CostCentreDescription)
                }
            }
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CostObject)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ObjectNo)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ObjectName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FromDivision)
        </td>
        <td>
            @*@Html.DisplayFor(modelItem => item.NetPrice)*@
            @if (item.NetPrice != null)
            {
                var netprice = Convert.ToDecimal(item.NetPrice.Value).ToString("#,##0.00");
                @Html.DisplayFor(m => netprice)
            }
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Currency)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.VariationOrderNo)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.UpdateBy)
        </td>
        <td>
            @*@Html.DisplayFor(modelItem => item.UpdateDate)*@
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.SubmitBy)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SubmitDate)
        </td>*@
        <td>
            @Html.DisplayFor(modelItem => item.Status)
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.ApplicationFor)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ReasonFor)
        </td>*@
        <td>
            @Html.ActionLink("Details", "Index", new { Controller = "SupBudtDetails", Area = "User",  id=item.ReferenceNo }) |
            @*@Html.ActionLink("Details", "Details", new { id=item.ReferenceNo }) |*@
            @Html.ActionLink("Delete", "DeleteSubDetails", new { id=item.ReferenceNo }, new { onclick = "return ConfirmDelete('"+item.ReferenceNo+"');return false;" } )
        </td>
    </tr>
}

</table>

@{
    double TotalPage = Convert.ToDouble(@ViewBag.TotalPages);

}



<ul class="pagination">
    @for (int i = 1; i <= TotalPage; i++)

    {
        if (i == ViewBag.Page)
        {
            <li class="active"> @Html.ActionLink(i.ToString() + " ", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : ViewBag.SortOrder), Sortby = (ViewBag.Sortby == null ? "ReferenceNo" : ViewBag.Sortby), Page = i })</li>


        }
        else
        {

            <li> @Html.ActionLink(i.ToString() + " ", "Index", new { SortOrder = (ViewBag.SortOrder == null ? "Asc" : ViewBag.SortOrder), Sortby = (ViewBag.Sortby == null ? "ReferenceNo" : ViewBag.Sortby), Page = i }) </li>
        }
    }

</ul>

<script src="~/scripts/jquery-1.10.2.min.js"></script>
<script>
    function ConfirmDelete(refNo) {
      //  debugger;
        $.ajax({
            cache: false,
            type: "GET",
            url: '@Url.Action("GetSubDetailCount", "SupBudtDetails")',
            data: {
                "RefNo": refNo
            },
            success: function (response) {
                var res = response;
                if(res==1)
                {
                    var conf = confirm("There are some supdetails available for this reference. This will also get delete." +
                        "Do you want to continue?");
                    if(conf)
                    {
                        DeleteRefNo(refNo);
                    }
                   
                }
                else
                {
                    var conf = confirm("Are you sure you want to delete?");
                    if (conf) {
                        DeleteRefNo(refNo);
                    }
                    
                }
               // debugger;
                //  $("#ddlGlaAccount").empty();
                //   json = json || {};
                // $("#ddlGlaAccount").append('<option value="">' + "-- Select GlCode --" + '</option>');
                // debugger;

                //for (var i = 0; i < json.length; i++) {
                // $("#ddlGlaAccount").append('<option value="' + json[i].GlDesc + '">' + json[i].GlCode + '</option>');

                // }
                //  $("#ddlGlaAccount").prop("disabled", false);
            },
            error: function (xhr) {
                alert("error: " + xhr.statusText);
            }
        });
        return false;
    }
    function  DeleteRefNo(refNo)
    {
       // debugger;
        $.ajax({
            cache: false,
            type: "GET",
            url: '@Url.Action("DeleteSubDetails", "SupplementaryBudget")',
            data: {
                "RefNo": refNo
            },
            success: function (response) {
                //window.location.href = "/User/SupplementaryBudget/Index";
                window.location.reload();
            },
            error: function (xhr) {
                alert("error: " + xhr.statusText);
            }
        });
    }
</script>
