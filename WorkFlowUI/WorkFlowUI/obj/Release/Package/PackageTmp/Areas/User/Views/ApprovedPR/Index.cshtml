@model IEnumerable<BOL.tbl_Documents>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Approved PR</h2>
<style type="text/css">
    .customleftsize {
        width: 130px !important;
    }
</style>
<script src="~/scripts/jquery-1.10.2.min.js"></script>
<script>
    $(document).ready(function () {
        $('#btnSearch').click(function () {
            //   debugger;
            this.href = this.href.replace("SearchData", checkandreplace($("#txtSearch").val()));
            this.href = this.href.replace("VendorNameValue", checkandreplace($("#txtVendorName").val()));
        });
    })

    function ConfirmCancel() {

        return confirm('Are you sure, yow want to Cancel Approved PR?');
    }

</script>
<div class="row">
    <div class="col-sm-12">
        <ul class="nav nav-pills col-lg-8">
            @if (ViewBag.Status == "A")
            {
                <li class="active">@Html.ActionLink("Approved PR", "Index", new { Status = "A", Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })</li>
            }
            else
            {
                <li> @Html.ActionLink("Approved PR", "Index", new { Status = "A", Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })</li>
            }
            @if (ViewBag.Status == "P")
            {
                <li class="active">@Html.ActionLink("Pending Documents", "Index", new { Status = "P", Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })</li>
            }
            else
            {
                <li> @Html.ActionLink("Pending Documents", "Index", new { Status = "P", Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })</li>
            }
        </ul>
    </div>
</div>

<div class="row empty-row">
    <div class="col-sm-12">
    </div>
</div>

<div>
    <div class="row" style="margin-bottom:10px">
        <div class="col-sm-2 customleftsize">
            Document No.
        </div>
        <div class="col-sm-8">
            @Html.TextBox("txtSearch", Convert.ToString(ViewData["Search"]))
            &nbsp;&nbsp;&nbsp;
        </div>
    </div>
    <div class="row" style="margin-bottom:10px">
        <div class="col-sm-2 customleftsize">
            Vendor Name
        </div>
        <div class="col-sm-8">
            @Html.TextBox("txtVendorName", Convert.ToString(ViewData["VendorName"]))
        </div>
    </div>
    <div class="row" style="margin-bottom:10px">
        <div class="col-sm-2 customleftsize">

        </div>
        <div class="col-sm-4">
            @Html.ActionLink("Search", "Index", new
       {
           Status = ViewBag.Status,
           //DocType=ViewBag.DocType,
           SortOrder = (ViewBag.SortOrder == null ? "Desc" :
         (ViewBag.SortOrder == "Asc" ? "Asc" : "Desc")),
           Sortby = "UpdateDate",
           page = (ViewBag.Page == null ? "1" : ViewBag.Page),
           Search = "SearchData",
           VendorName = "VendorNameValue"
       }, new { id = "btnSearch" })
        </div>
    </div>
    <div class="row empty-row">
        <div class="col-sm-12">
        </div>
    </div>
</div>


<table class="table table-striped table-bordered table-hover ">
    <tr class="info">
        <th>
            @*@Html.DisplayNameFor(model => model.DocType)*@
            @*@Html.ActionLink("DocType", "Index", new {SortOrder = "Asc", Sortby = "DocType" } )*@
            @Html.ActionLink("DocType", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "DocType", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>

        <th>
            @*   @Html.DisplayNameFor(model => model.DocNo)*@
            @Html.ActionLink("DocNo", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "DocNo", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.NetPrice)*@
            @Html.ActionLink("NetPrice", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "DocNetPrice", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>

        <th>
            @* @Html.DisplayNameFor(model => model.Currency)*@
            @Html.ActionLink("Currency", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "Currency", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>

        <th>
            @*@Html.DisplayNameFor(model => model.NetPrice)*@
            @Html.ActionLink("NetPriceLocal", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "NetPrice", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.VendorCode)*@
            @Html.ActionLink("VendorCode", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "VendorCode", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.VendorName)*@
            @Html.ActionLink("VendorName", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "VendorName", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>
        @*<th>
                @* @Html.DisplayNameFor(model => model.SubmitBy)
                @Html.ActionLink("VendorCategory", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "VendorCategory", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName= Convert.ToString(ViewData["VendorName"]) })

            </th>*@
        <th>
            @* @Html.DisplayNameFor(model => model.SubmitBy)*@
            @Html.ActionLink("ReleasedBy", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "SubmitBy", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })

        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.SubmitDate)*@
            @Html.ActionLink("ReleasedDate", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "SubmitDate", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })


        </th>


        @*<th>
                @Html.DisplayNameFor(model => model.ApprovalSubmitDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ApprovalSubmitBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>*@

        <th>
            @*@Html.DisplayNameFor(model => model.AttachDoc)*@
            @Html.ActionLink("AttachDoc1", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "AttachDoc", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.AddAttachDoc1)*@
            @Html.ActionLink("AttachDoc2", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "AddAttachDoc1", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.AddAttachDoc2)*@
            @Html.ActionLink("AttachDoc3", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "AddAttachDoc2", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.AddAttachDoc3)*@
            @Html.ActionLink("AttachDoc4", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "AddAttachDoc3", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.UpdateDate)*@
            @Html.ActionLink("ApprovedDate", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc")), Sortby = "UpdateDate", page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })


        </th>

        </th>
        @if (ViewBag.Status == "A")
            {
            <th>Action</th>
        }

    </tr>

    @foreach (var item in Model)
            {
        <tr>



            <td>
                @Html.DisplayFor(modelItem => item.DocType)
            </td>
            <td>
                @*<a target ="_blank" href=@item.DocNo> @item.DocNo </a>*@
                @* @Html.DisplayFor(modelItem => item.DocNo)*@
                @Html.ActionLink(@item.DocNo, "RouteDocNo", new { docId = @item.DocID, docNo = @item.DocNo, type = @item.DocType, status = @item.Status, Page = ViewBag.Page })
            </td>
            <td>
                @* @Html.DisplayFor(modelItem => item.DocNetPrice)*@
                @if (item.DocNetPrice != null)
                {
                    var netprice = Convert.ToDecimal(item.DocNetPrice.Value).ToString("#,##0.00");
                    @Html.DisplayFor(m => netprice)
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Currency)
            </td>
            <td>
                @* @Html.DisplayFor(modelItem => item.NetPrice)*@
                @if (item.NetPrice != null)
                {
                    var netprice = Convert.ToDecimal(item.NetPrice.Value).ToString("#,##0.00");
                    @Html.DisplayFor(m => netprice)
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VendorCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VendorName)
                @if (Convert.ToBoolean(item.IsMultipleVendor))
                {
                    @Html.ActionLink(" & more ...", "RouteDocNo", new { docId = @item.DocID, docNo = @item.DocNo, type = @item.DocType, status = @item.Status, Page = ViewBag.Page })
                }
            </td>
            @* <td>
                    @Html.DisplayFor(modelItem => item.VendorCategory)
                </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.SubmitBy)
            </td>
            <td>
                @if (item.SubmitDate != null)
                {
                    var dateVal = item.SubmitDate.Value.ToString("dd/MM/yyyy HH:mm:ss");
                    @Html.DisplayFor(m => dateVal)
                }
            </td>


            @*<td>
                    @Html.DisplayFor(modelItem => item.ApprovalSubmitDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovalSubmitBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>*@
            <td>


                @if (item.AttachDoc != null)
                {
                    @Html.ActionLink(item.AttachDoc, "GetDocument", new { docNo = @item.DocNo, name = @item.AttachDoc, erpattach = @item.ERPAttachment }, new { target = "_blank" })
                }

            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.AddAttachDoc1)*@
                @if (item.AddAttachDoc1 != null)
                {
                    @Html.ActionLink(item.AddAttachDoc1, "GetDocument", new { docNo = @item.DocNo, name = @item.AddAttachDoc1, erpattach = @item.ERPAttachment }, new { target = "_blank" })
                }
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.AddAttachDoc2)*@
                @if (item.AddAttachDoc2 != null)
                {
                    @Html.ActionLink(item.AddAttachDoc2, "GetDocument", new { docNo = @item.DocNo, name = @item.AddAttachDoc2, erpattach = @item.ERPAttachment }, new { target = "_blank" })
                }
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.AddAttachDoc3)*@
                @if (item.AddAttachDoc3 != null)
                {
                    @Html.ActionLink(item.AddAttachDoc3, "GetDocument", new { docNo = @item.DocNo, name = @item.AddAttachDoc3, erpattach = @item.ERPAttachment }, new { target = "_blank" })
                }
            </td>

            <td>
                @*@Html.DisplayFor(modelItem => item.UpdateDate)*@
                @if (item.UpdateDate != null)
                {
                    var dateVal = item.UpdateDate.Value.ToString("dd/MM/yyyy HH:mm:ss");
                    @Html.DisplayFor(m => dateVal)
                }
            </td>

            @if (ViewBag.Status == "A")
                {
                <td>
                    @Html.ActionLink("Cancel", "CancelDocument", new { id = item.DocID, Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Desc" : ViewBag.SortOrder), Sortby = (ViewBag.Sortby == null ? "UpdateDate" : ViewBag.Sortby), page = (ViewBag.Page == null ? "1" : ViewBag.Page), Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) }, new { onclick = "return ConfirmCancel()" })
                </td>
            }

        </tr>
    }

</table>

@{
            double TotalPage = Convert.ToDouble(@ViewBag.TotalPages);

}


<ul class="pagination">
    @for (int i = 1; i <= TotalPage; i++)

            {
                if (i == ViewBag.Page)
                {
            <li class="active"> @Html.ActionLink(i.ToString() + " ", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Desc" : ViewBag.SortOrder), Sortby = (ViewBag.Sortby == null ? "UpdateDate" : ViewBag.Sortby), Page = i, Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) })</li>


        }
        else
        {

            <li> @Html.ActionLink(i.ToString() + " ", "Index", new { Status = ViewBag.Status, SortOrder = (ViewBag.SortOrder == null ? "Desc" : ViewBag.SortOrder), Sortby = (ViewBag.Sortby == null ? "UpdateDate" : ViewBag.Sortby), Page = i, Search = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["Search"])), VendorName = clsGeneral.searchStringEncrypt(Convert.ToString(ViewData["VendorName"])) }) </li>
        }
    }

</ul>

